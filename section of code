print_uint:
   	xor	rax, rax		; обнуляем rax, rsi, r9. rax будет конечным результатом процедуры
	xor	r9, r9			; r9 как счетчик длины
	xor	rsi, rsi	    ; rsi как буфер для текучей цифры
	mov	r10, 10			; записываем систему основания числа
.loop:					;
	mov	sil, byte[rdi]		; записываем текучую строчку
	inc	rdi			; переходи к следующему адресу
	cmp	sil, 0		; при равенстве нулю прерываем процедуру
	je	.end			;
	sub	sil, '0'		; преобразуем код ASCII в его число эквивалент
	cmp	sil, 0			; сверяем с каждым числом и при соответсвии добавляем его в конец
	je	.add_number		; 
    cmp	sil, 1			; 
	je	.add_number
    cmp	sil, 2			; 
	je	.add_number
    cmp	sil, 3			; 
	je	.add_number
    cmp	sil, 4			; 
	je	.add_number
    cmp	sil, 5			; 
	je	.add_number
    cmp	sil, 6			; 
	je	.add_number
    cmp	sil, 7			; 
	je	.add_number
    cmp	sil, 8			; 
	je	.add_number	
	cmp	rsi, 9			; 
	je	.add_number			;
    jmp .end
.add_number:
	mul	r10			    ; увеличиваем rax на 10 и складываем с текучим числом 
	add	rax, rsi		;
	inc	r9			    ; увеличиваем текучую длину слова
	jmp	.loop			;
.end:					;
	mov	rdx, r9			; записываем в rdx длину слова
	ret
	
